// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

// Risk indicator
// inspired by Benjamin Cowen's complicated function
// adjusted for smaller procentage moves over time by log(Low growth curve) *, seems good enough.
// normalized between 0-1 default **
// No rights reserved, copy, paste, do what you want.
// * thanks to quantadelic
// ** thanks FlyingSix

//@version=4
study("BTC Risk Metric")

// Normalize function from Flyingsix on StackOverflow (https://stackoverflow.com/questions/62306070/pine-script-normalize-and-rescale-function-with-calculation-or-input-errors)
normalize(_src, _min, _max) => 
    // Normalizes series with unknown min/max using historical min/max.
    // _src: series to rescale.
    // _min: minimum value of rescaled series.
    // _max: maximum value of rescaled series.
    var _historicMin = +10e10
    var _historicMax = -10e10
    _historicMin := min(nz(_src, _historicMin), _historicMin)
    _historicMax := max(nz(_src, _historicMax), _historicMax)
    _min + (_max - _min) * (_src - _historicMin) / max(_historicMax - _historicMin, 10e-10)


// Code from quantadelic 
LowIntercept =  input(-3.0269716, title="Bottom Curve Intercept", step=0.001) 
LowSlope =      input(0.001329, title="Bottom Curve Slope", step=0.00001)
TimeIndex =     time < 1279670400000 ? 3.0 : (time - 1279670400000) / 86400000 
Weight =        (log10(TimeIndex + 10) * TimeIndex * TimeIndex - TimeIndex) / 30000
LowSlopeCum =   LowSlope * TimeIndex
TimeDelta =     time - time[1] 
LowLogDev =     TimeIndex > 2 ? log(Weight) + LowIntercept + LowSlopeCum : na 
LowDev =        pow(2.718281828459, LowLogDev) 
// code from quantadelic ends


weeks = input(20, title = 'Length')
MA = sma(close, weeks)
bubble = normalize(((close)/MA)*(log(LowDev+math.e)),0,1)


red = int(normalize(bubble, 0,255))
blue = int(normalize(-bubble, 0, 255))
color risk_color = color.rgb(red,0,blue,0)
plot(bubble, color=risk_color, linewidth=2, title="Color Coded")
